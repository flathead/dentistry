import { ValidateProps } from '@/api-lib/constants';
import {
  createToken,
  findAndDeleteTokenByIdAndType,
  findUserByEmail,
  UNSAFE_updateUserPassword,
} from '@/api-lib/db';
import { CONFIG as MAIL_CONFIG, sendMail } from '@/api-lib/mail';
import { validateBody } from '@/api-lib/middlewares';
import { getMongoDb } from '@/api-lib/mongodb';
import { ncOpts } from '@/api-lib/nc';
import nc from 'next-connect';
import normalizeEmail from 'validator/lib/normalizeEmail';

const handler = nc(ncOpts);

handler.post(
  validateBody({
    type: 'object',
    properties: {
      email: ValidateProps.user.email,
    },
    required: ['email'],
    additionalProperties: false,
  }),
  async (req, res) => {
    const db = await getMongoDb();

    const email = normalizeEmail(req.body.email);
    const user = await findUserByEmail(db, email);
    if (!user) {
      res.status(400).json({
        error: {
          message: '–º—ã –Ω–µ –Ω–∞—à–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        },
      });
      return;
    }

    const token = await createToken(db, {
      creatorId: user._id,
      type: 'passwordReset',
      expireAt: new Date(Date.now() + 1000 * 60 * 20),
    });

    await sendMail({
      to: email,
      from: MAIL_CONFIG.from,
      subject: `${process.env.NEXT_PUBLIC_SITE_NAME} –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è.`,
      html: `
      <div>
        <h2>–ü—Ä–∏–≤–µ—Ç, ${user.name}! üëã</h2>
		<p>–¢–æ–ª—å–∫–æ —á—Ç–æ —Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –±—ã–ª –∑–∞–ø—Ä–æ—à–µ–Ω —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞. –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, —Å—Ä–æ—á–Ω–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å—å—Ç–µ –ø–∞—Ä–æ–ª—å.</p>
		<br>
        <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ <a href="${process.env.WEB_URI}/forget-password/${token._id}">—ç—Ç—É —Å—Å—ã–ª–∫—É</a> –¥–ª—è —Å–±—Ä–æ—Å–∞ –í–∞—à–µ–≥–æ –ø–∞—Ä–æ–ª—è.</p>
      </div>
      `,
    });

    res.status(204).end();
  }
);

handler.put(
  validateBody({
    type: 'object',
    properties: {
      password: ValidateProps.user.password,
      token: { type: 'string', minLength: 0 },
    },
    required: ['password', 'token'],
    additionalProperties: false,
  }),
  async (req, res) => {
    const db = await getMongoDb();

    const deletedToken = await findAndDeleteTokenByIdAndType(
      db,
      req.body.token,
      'passwordReset'
    );
    if (!deletedToken) {
      res.status(403).end();
      return;
    }
    await UNSAFE_updateUserPassword(
      db,
      deletedToken.creatorId,
      req.body.password
    );
    res.status(204).end();
  }
);

export default handler;
